{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-table-to-excel/lib/dom-parser.service.ts","ng://ngx-table-to-excel/lib/table-to-excel.service.ts","ng://ngx-table-to-excel/lib/ngx-table-to-excel.module.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","DomParserService","prototype","parseDomToTable","ws","htmlElement","opts","_r","_c","cs","rs","c","tableObject","tagName","widths","rows","getElementsByTagName","getAttribute","split","map","item","parseInt","merges","wsRowCount","rowCount","row","getRow","height","parseFloat","tds","children","td","_m","s","exCell","getCell","this","getColumnAddress","getValue","autoStyle","styles","getStylesDataAttr","font","alignment","border","fill","numFmt","cellValueWithoutSpaces","replace","test","Number","splice","forEach","width","_i","columns","applyMerges","_this","mergeCells","getExcelColumnName","num","ret","a","b","String","fromCharCode","Math","trunc","col","dataType","rawVal","htmldecode","innerHTML","innerText","val","Date","toLowerCase","Boolean","text","hyperlink","str","entities","x","RegExp","trim","getHexArgbColor","computedColor","computedColorStr","indexOf","rgbaValues","toString","g","round","toUpperCase","cssComputedStyles","window","getComputedStyle","name","size","color","argb","getPropertyValue","convertedColor","bold","italic","underline","strike","horizontal","vertical","wrapText","textRotation","indent","readingOrder","top","left","bottom","right","style","type","pattern","fgColor","computedBackgroundColor","convertedBackgroundColor","Injectable","TableToExcelService","initWorkBook","ExcelJS","Workbook","initSheet","wb","sheetName","addWorksheet","save","fileName","xlsx","writeBuffer","then","buffer","saveAs","Blob","tableToSheet","table","sheet","parser","tableToBook","convert","Object","assign","NgxTableToExcelModule","NgModule","args","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DomParserService {\r\n    /**\r\n     * Parse HTML table to excel worksheet\r\n     * @param ws The worksheet object\r\n     * @param table The table to be converted to excel sheet\r\n     */\r\n    parseDomToTable(ws, htmlElement, opts) {\r\n        let _r, _c, cs, rs, r, c;\r\n        let tableObject = htmlElement.tagName === \"TABLE\";\r\n        if (tableObject) {\r\n          let rows = [...htmlElement.getElementsByTagName(\"tr\")];\r\n          let widths = htmlElement.getAttribute(\"data-cols-width\");\r\n          if (widths) {\r\n            widths = widths.split(\",\").map(function (item) {\r\n              return parseInt(item);\r\n            });\r\n          }\r\n          let merges = [];\r\n          let wsRowCount = ws.rowCount;\r\n          for (_r = 0; _r < rows.length; ++_r) {\r\n            let row = rows[_r];\r\n            r = wsRowCount + _r + 1; // Actual excel row number\r\n            c = 1; // Actual excel col number\r\n            if (row.getAttribute(\"data-exclude\") === \"true\") {\r\n              rows.splice(_r, 1);\r\n              _r--;\r\n              continue;\r\n            }\r\n            if (row.getAttribute(\"data-height\")) {\r\n              let exRow = ws.getRow(r);\r\n              exRow.height = parseFloat(row.getAttribute(\"data-height\"));\r\n            }\r\n    \r\n            let tds = [...row.children];\r\n            for (_c = 0; _c < tds.length; ++_c) {\r\n              let td = tds[_c];\r\n              if (td.getAttribute(\"data-exclude\") === \"true\") {\r\n                tds.splice(_c, 1);\r\n                _c--;\r\n                continue;\r\n              }\r\n              for (let _m = 0; _m < merges.length; ++_m) {\r\n                var m = merges[_m];\r\n                if (m.s.c == c && m.s.r <= r && r <= m.e.r) {\r\n                  c = m.e.c + 1;\r\n                  _m = -1;\r\n                }\r\n              }\r\n              let exCell = ws.getCell(this.getColumnAddress(c, r));\r\n              // calculate merges\r\n              cs = parseInt(td.getAttribute(\"colspan\")) || 1;\r\n              rs = parseInt(td.getAttribute(\"rowspan\")) || 1;\r\n              if (cs > 1 || rs > 1) {\r\n                merges.push({\r\n                  s: { c: c, r: r },\r\n                  e: { c: c + cs - 1, r: r + rs - 1 }\r\n                });\r\n              }\r\n              c += cs;\r\n              exCell.value = this.getValue(td, tableObject);\r\n              if (!opts.autoStyle) {\r\n                let styles = this.getStylesDataAttr(td);\r\n                exCell.font = styles.font || null;\r\n                exCell.alignment = styles.alignment || null;\r\n                exCell.border = styles.border || null;\r\n                exCell.fill = styles.fill || null;\r\n                exCell.numFmt = styles.numFmt || null;\r\n                //Auto-detecting currency\r\n                if (exCell.numFmt == null && typeof exCell.value == \"string\") {\r\n                  let cellValueWithoutSpaces = exCell.value.replace(/ /g, '').replace(/\\,/g, '');\r\n                  const regex = /^(\\+|\\-)?\\$[0-9]+(\\.[0-9]{1,2})?$/;\r\n                  if (regex.test(cellValueWithoutSpaces)) {\r\n                    exCell.value = exCell.value.replace(/[^0-9\\+\\-\\.]/g, \"\")\r\n                    exCell.value = Number(exCell.value);\r\n                    exCell.numFmt = \"$#,##0.00\";\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          //Setting column width\r\n          if (widths) {\r\n            widths.forEach((width, _i) => {\r\n              ws.columns[_i].width = width;\r\n            });\r\n          }\r\n          this.applyMerges(ws, merges);\r\n          return ws;\r\n        }\r\n        else {\r\n          let widths = htmlElement.getAttribute(\"data-cols-width\");\r\n          if (widths) {\r\n            widths = widths.split(\",\").map(function (item) {\r\n              return parseInt(item);\r\n            });\r\n          }\r\n          let merges = [];\r\n          _r = 0;\r\n          let row = htmlElement;\r\n          r = ws.rowCount + _r + 1; // Actual excel row number\r\n          c = 1; // Actual excel col number\r\n          if (row.getAttribute(\"data-exclude\") === \"true\") {\r\n            return ws;\r\n          }\r\n          if (row.getAttribute(\"data-height\")) {\r\n            let exRow = ws.getRow(r);\r\n            exRow.height = parseFloat(row.getAttribute(\"data-height\"));\r\n          }\r\n    \r\n          for (let _m = 0; _m < merges.length; ++_m) {\r\n            var m = merges[_m];\r\n            if (m.s.c == c && m.s.r <= r && r <= m.e.r) {\r\n              c = m.e.c + 1;\r\n              _m = -1;\r\n            }\r\n          }\r\n          let exCell = ws.getCell(this.getColumnAddress(c, r));\r\n          // calculate merges\r\n          cs = parseInt(row.getAttribute(\"colspan\")) || 1;\r\n          rs = parseInt(row.getAttribute(\"rowspan\")) || 1;\r\n          if (cs > 1 || rs > 1) {\r\n            merges.push({\r\n              s: { c: c, r: r },\r\n              e: { c: c + cs - 1, r: r + rs - 1 }\r\n            });\r\n          }\r\n          c += cs;\r\n          exCell.value = this.getValue(row, tableObject);\r\n          if (!opts.autoStyle) {\r\n            let styles = this.getStylesDataAttr(row);\r\n            exCell.font = styles.font || null;\r\n            exCell.alignment = styles.alignment || null;\r\n            exCell.border = styles.border || null;\r\n            exCell.fill = styles.fill || null;\r\n            exCell.numFmt = styles.numFmt || null;\r\n            //Auto-detecting currency\r\n            if (exCell.numFmt == null && typeof exCell.value == \"string\") {\r\n              let cellValueWithoutSpaces = exCell.value.replace(/ /g, '').replace(/\\,/g, '');\r\n              const regex = /^(\\+|\\-)?\\$[0-9]+(\\.[0-9]{1,2})?$/;\r\n              if (regex.test(cellValueWithoutSpaces)) {\r\n                exCell.value = exCell.value.replace(/[^0-9\\+\\-\\.]/g, \"\")\r\n                exCell.value = Number(exCell.value);\r\n                exCell.numFmt = \"$#,##0.00\";\r\n              }\r\n            }\r\n          }\r\n          //Setting column width\r\n          if (widths)\r\n            widths.forEach((width, _i) => {\r\n              ws.columns[_i].width = width;\r\n            });\r\n          this.applyMerges(ws, merges);\r\n          return ws;\r\n        }\r\n      };\r\n\r\n      /**\r\n     * To apply merges on the sheet\r\n     * @param ws The worksheet object\r\n     * @param merges array of merges\r\n     */\r\n    applyMerges(ws, merges) {\r\n        merges.forEach(m => {\r\n          ws.mergeCells(\r\n            this.getExcelColumnName(m.s.c) +\r\n            m.s.r +\r\n            \":\" +\r\n            this.getExcelColumnName(m.e.c) +\r\n            m.e.r\r\n          );\r\n        });\r\n      };\r\n\r\n      /**\r\n     * Takes a positive integer and returns the corresponding column name.\r\n     * @param num The positive integer to convert to a column name.\r\n     * @return The column name.\r\n     */\r\n    getExcelColumnName(num: number): string {\r\n        for (var ret = \"\", a = 1, b = 26; (num -= a) >= 0; a = b, b *= 26) {\r\n          ret = String.fromCharCode(Math.trunc((num % b) / a) + 65) + ret;\r\n        }\r\n        return ret;\r\n      };\r\n    \r\n      getColumnAddress(col, row) {\r\n        return this.getExcelColumnName(col) + row;\r\n      };\r\n\r\n      /**\r\n     * Checks the data type specified and converts the value to it.\r\n     */\r\n    getValue(td, tableObject) {\r\n        let dataType = td.getAttribute(\"data-t\");\r\n        let rawVal = tableObject ? this.htmldecode(td.innerHTML) : td.innerText;\r\n        if (dataType) {\r\n          let val;\r\n          switch (dataType) {\r\n            case \"n\": //number\r\n              rawVal = rawVal.replace(/[^0-9\\+\\-\\.]/g, \"\")\r\n              val = Number(rawVal);\r\n              break;\r\n            case \"d\": //date\r\n              val = new Date(rawVal);\r\n              break;\r\n            case \"b\": //boolean\r\n              val =\r\n                rawVal.toLowerCase() === \"true\"\r\n                  ? true\r\n                  : rawVal.toLowerCase() === \"false\"\r\n                    ? false\r\n                    : Boolean(parseInt(rawVal));\r\n              break;\r\n            default:\r\n              val = rawVal;\r\n          }\r\n          return val;\r\n        } else if (td.getAttribute(\"data-hyperlink\")) {\r\n          return {\r\n            text: rawVal,\r\n            hyperlink: td.getAttribute(\"data-hyperlink\")\r\n          };\r\n        } else if (td.getAttribute(\"data-error\")) {\r\n          return { error: td.getAttribute(\"data-error\") };\r\n        }\r\n        return rawVal;\r\n      };\r\n\r\n      /**\r\n     * Convert HTML to plain text\r\n     */\r\n    htmldecode(str) {\r\n        let entities = [\r\n            [\"nbsp\", \" \"],\r\n            [\"middot\", \"Â·\"],\r\n            [\"quot\", '\"'],\r\n            [\"apos\", \"'\"],\r\n            [\"gt\", \">\"],\r\n            [\"lt\", \"<\"],\r\n            [\"amp\", \"&\"]\r\n          ].map(function (x) {\r\n            return [new RegExp(\"&\" + x[0] + \";\", \"g\"), x[1]];\r\n          });\r\n\r\n        let o = str\r\n          .trim()\r\n          .replace(/\\s+/g, \" \")\r\n          .replace(/<\\s*[bB][rR]\\s*\\/?>/g, \"\\n\")\r\n          .replace(/<[^>]*>/g, \"\");\r\n        for (let i = 0; i < entities.length; ++i)\r\n          o = o.replace(entities[i][0], entities[i][1]);\r\n        return o;\r\n      };\r\n\r\n      /**\r\n     * Convert computed colors to hex ARGB\r\n     * @param computedColor Computed color string from getPropertyValue()\r\n     */\r\n    getHexArgbColor(computedColor: string) {\r\n        //if RGB then convert to RGBA\r\n        let computedColorStr = computedColor;\r\n        if (computedColorStr.indexOf('a') == -1) {\r\n          computedColorStr = computedColorStr.replace(')', ', 1)').replace('rgb', 'rgba');\r\n        }\r\n    \r\n        let rgbaValues = computedColorStr.split(\"(\")[1].split(\")\")[0].split(\",\");\r\n    \r\n        let r = (+rgbaValues[0]).toString(16),\r\n          g = (+rgbaValues[1]).toString(16),\r\n          b = (+rgbaValues[2]).toString(16),\r\n          a = Math.round(+rgbaValues[3] * 255).toString(16);\r\n    \r\n        if (a == '0') { return \"\" }\r\n    \r\n        if (r.length == 1)\r\n          r = \"0\" + r;\r\n        if (g.length == 1)\r\n          g = \"0\" + g;\r\n        if (b.length == 1)\r\n          b = \"0\" + b;\r\n        // if (a.length == 1)\r\n        //   a = \"0\" + a;\r\n    \r\n        return \"F\" + r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\r\n      };\r\n\r\n      /**\r\n     * Prepares the style object for a cell using the data attributes\r\n     */\r\n    getStylesDataAttr(td) {\r\n        let cssComputedStyles = window.getComputedStyle(td, null);\r\n        //Font attrs\r\n        let font: any = {};\r\n        if (td.getAttribute(\"data-f-name\"))\r\n          font.name = td.getAttribute(\"data-f-name\");\r\n        if (td.getAttribute(\"data-f-sz\")) font.size = td.getAttribute(\"data-f-sz\");\r\n        if (td.getAttribute(\"data-f-color\")) {\r\n          if (td.getAttribute(\"data-f-color\") != \"none\") {\r\n            font.color = { argb: td.getAttribute(\"data-f-color\") };\r\n          }\r\n        }\r\n        else {\r\n          //Set css color style by default\r\n          let computedColor = cssComputedStyles.getPropertyValue(\"color\");\r\n          let convertedColor = this.getHexArgbColor(computedColor)\r\n          if (convertedColor != \"\") {\r\n            font.color = { argb: convertedColor };\r\n          }\r\n        }\r\n        if (td.getAttribute(\"data-f-bold\") === \"true\") font.bold = true;\r\n        if (td.getAttribute(\"data-f-italic\") === \"true\") font.italic = true;\r\n        if (td.getAttribute(\"data-f-underline\") === \"true\") font.underline = true;\r\n        if (td.getAttribute(\"data-f-strike\") === \"true\") font.strike = true;\r\n    \r\n        // Alignment attrs\r\n        let alignment: any = {};\r\n        if (td.getAttribute(\"data-a-h\"))\r\n          alignment.horizontal = td.getAttribute(\"data-a-h\");\r\n        if (td.getAttribute(\"data-a-v\")) {\r\n          alignment.vertical = td.getAttribute(\"data-a-v\");\r\n        }\r\n        else {\r\n          // By default\r\n          alignment.vertical = \"middle\";\r\n        }\r\n        if (td.getAttribute(\"data-a-wrap\") === \"false\") {\r\n          alignment.wrapText = false;\r\n        }\r\n        else {\r\n          // By default\r\n          alignment.wrapText = true;\r\n        }\r\n        if (td.getAttribute(\"data-a-text-rotation\"))\r\n          alignment.textRotation = td.getAttribute(\"data-a-text-rotation\");\r\n        if (td.getAttribute(\"data-a-indent\"))\r\n          alignment.indent = td.getAttribute(\"data-a-indent\");\r\n        if (td.getAttribute(\"data-a-rtl\") === \"true\")\r\n          alignment.readingOrder = \"rtl\";\r\n    \r\n        // Border attrs\r\n        let border: any = {\r\n          top: {},\r\n          left: {},\r\n          bottom: {},\r\n          right: {}\r\n        };\r\n    \r\n        if (td.getAttribute(\"data-b-a-s\")) {\r\n          if (td.getAttribute(\"data-b-a-s\") != \"none\") {\r\n            let style = td.getAttribute(\"data-b-a-s\");\r\n            border.top.style = style;\r\n            border.left.style = style;\r\n            border.bottom.style = style;\r\n            border.right.style = style;\r\n          }\r\n        }\r\n        else {\r\n          // By default\r\n          border.top.style = \"thin\";\r\n          border.left.style = \"thin\";\r\n          border.bottom.style = \"thin\";\r\n          border.right.style = \"thin\";\r\n        }\r\n        if (td.getAttribute(\"data-b-a-c\")) {\r\n          let color = { argb: td.getAttribute(\"data-b-a-c\") };\r\n          border.top.color = color;\r\n          border.left.color = color;\r\n          border.bottom.color = color;\r\n          border.right.color = color;\r\n        }\r\n        if (td.getAttribute(\"data-b-t-s\")) {\r\n          border.top.style = td.getAttribute(\"data-b-t-s\");\r\n          if (td.getAttribute(\"data-b-t-c\"))\r\n            border.top.color = { argb: td.getAttribute(\"data-b-t-c\") };\r\n        }\r\n        if (td.getAttribute(\"data-b-l-s\")) {\r\n          border.left.style = td.getAttribute(\"data-b-l-s\");\r\n          if (td.getAttribute(\"data-b-l-c\"))\r\n            border.left.color = { argb: td.getAttribute(\"data-b-t-c\") };\r\n        }\r\n        if (td.getAttribute(\"data-b-b-s\")) {\r\n          border.bottom.style = td.getAttribute(\"data-b-b-s\");\r\n          if (td.getAttribute(\"data-b-b-c\"))\r\n            border.bottom.color = { argb: td.getAttribute(\"data-b-t-c\") };\r\n        }\r\n        if (td.getAttribute(\"data-b-r-s\")) {\r\n          border.right.style = td.getAttribute(\"data-b-r-s\");\r\n          if (td.getAttribute(\"data-b-r-c\"))\r\n            border.right.color = { argb: td.getAttribute(\"data-b-t-c\") };\r\n        }\r\n    \r\n        //Fill\r\n        let fill;\r\n        if (td.getAttribute(\"data-fill-color\")) {\r\n          if (td.getAttribute(\"data-fill-color\") != \"none\") {\r\n            fill = {\r\n              type: \"pattern\",\r\n              pattern: \"solid\",\r\n              fgColor: { argb: td.getAttribute(\"data-fill-color\") }\r\n            };\r\n          }\r\n        }\r\n        else {\r\n          //Set css color style by default\r\n          let computedBackgroundColor = cssComputedStyles.getPropertyValue(\"background-color\");\r\n          let convertedBackgroundColor = this.getHexArgbColor(computedBackgroundColor)\r\n          if (convertedBackgroundColor != \"\") {\r\n            fill = {\r\n              type: \"pattern\",\r\n              pattern: \"solid\",\r\n              fgColor: { argb: convertedBackgroundColor }\r\n            };\r\n          }\r\n        }\r\n    \r\n        //number format\r\n        let numFmt;\r\n        if (td.getAttribute(\"data-num-fmt\"))\r\n          numFmt = td.getAttribute(\"data-num-fmt\");\r\n    \r\n        return {\r\n          font,\r\n          alignment,\r\n          border,\r\n          fill,\r\n          numFmt\r\n        };\r\n      };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { DomParserService } from \"./dom-parser.service\";\nimport saveAs from 'file-saver';\nimport ExcelJS from 'exceljs/dist/es5/exceljs.browser';\n\n@Injectable()\nexport class TableToExcelService {\n\n  constructor(private readonly parser: DomParserService) {}\n\n  initWorkBook() {\n    let wb = new ExcelJS.Workbook();\n    return wb;\n  };\n\n  initSheet(wb, sheetName) {\n    let ws = wb.addWorksheet(sheetName);\n    return ws;\n  };\n\n  save(wb, fileName) {\n    wb.xlsx.writeBuffer().then(function(buffer) {\n      saveAs(\n        new Blob([buffer], { type: \"application/octet-stream\" }),\n        fileName\n      );\n    });\n  };\n\n  tableToSheet(wb, table, opts) {\n    let ws = this.initSheet(wb, opts.sheet.name);\n    ws = this.parser.parseDomToTable(ws, table, opts);\n    return wb;\n  };\n\n  tableToBook(table, opts) {\n    let wb = this.initWorkBook();\n    wb = this.tableToSheet(wb, table, opts);\n    return wb;\n  };\n\n  convert(table, opts: any = {}) {\n    let defaultOpts = {\n      name: \"export.xlsx\",\n      autoStyle: false,\n      sheet: {\n        name: \"Sheet 1\"\n      }\n    };\n    opts = Object.assign({}, defaultOpts, opts);\n    let wb = this.tableToBook(table, opts);\n    this.save(wb, opts.name);\n  };\n}\n","import { NgModule } from '@angular/core';\nimport { DomParserService } from './dom-parser.service';\nimport { TableToExcelService } from './table-to-excel.service';\n\n@NgModule({\n  providers: [\n    DomParserService,\n    TableToExcelService\n  ]\n})\nexport class NgxTableToExcelModule { }\n"]}